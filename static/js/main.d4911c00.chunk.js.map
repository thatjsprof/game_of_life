{"version":3,"sources":["logic/rules/rules.ts","logic/index.ts","logic/game/game.ts","components/grid.tsx","App.tsx","index.tsx"],"names":["BusinessRules","count","this","game","rows","columns","step","setup","finalSetup","finalBoard","tempBoard","checkCellStatus","x","y","value","i","j","newboard","createBoard","neighbors","getNeighbours","all","businessRules","caseOne","caseTwo","caseFour","board","rowsNeg","rowsPos","columnsNeg","columnsPos","check","confirmPosition","diagonals","d0","d1","d2","d3","opposites","p0","p1","p2","p3","Array","counter","length","Object","keys","forEach","index","includes","boardToCheck","array","push","runGame","init","Grid","useState","current","setCurrent","setCount","useEffect","interval","setInterval","clearInterval","def","dangerouslySetInnerHTML","__html","App","games","shift","className","ReactDOM","render","document","querySelector"],"mappings":"4NAwBeA,E,WArBb,WAAYC,GAAgB,yBAFlBA,WAEiB,EACzBC,KAAKD,MAAQA,E,yCAGf,WACE,OAAOC,KAAKD,OAAS,I,mBAGvB,WACE,OAAOC,KAAKD,OAAS,I,qBAGvB,WACE,OAAsB,IAAfC,KAAKD,OAA8B,IAAfC,KAAKD,Q,oBAGlC,WACE,OAAsB,IAAfC,KAAKD,U,KCyJDE,EAFF,I,WChKX,WACEC,EACAC,EACAC,EACAC,EACAC,GACC,IAAD,gCAdMJ,UAcN,OAbMC,aAaN,OAZMC,UAYN,OAXMC,MAAwC,GAW9C,KAVMC,WAA6C,GAUnD,KATMC,gBASN,OARMC,eAQN,OA4DQC,gBAAkB,SAACC,EAAWC,EAAWC,GACjD,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKX,KAAMW,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKX,QAASW,IAChC,EAAKP,WAAWM,GAAGC,GAAK,EAAKN,UAAUK,GAAGC,GAI9C,IAAMC,EACM,IAAVH,EAAc,EAAKI,YAAY,EAAKX,OAAS,EAAKE,WAE9CU,EAAY,EAAKC,cAAcR,EAAGC,EAAGI,GAEvChB,EAAQ,EAEZ,IAAK,IAAIc,KAAKI,EAAUE,IACG,OAArBF,EAAUE,IAAIN,IAAad,IAGjC,IAAMqB,EAAgB,IAAItB,EAAcC,GASxC,OAPIgB,EAASL,GAAGC,IACVS,EAAcC,SAAWD,EAAcE,WACzCP,EAASL,GAAGC,IAAK,GAEfS,EAAcG,WAAUR,EAASL,GAAGC,IAAK,GAGxCI,GAtFPf,KAAKE,KAAOA,EACZF,KAAKG,QAAUA,EACfH,KAAKI,KAAOA,EACZJ,KAAKK,MAAQA,EACbL,KAAKM,WAAaA,EAClBN,KAAKO,WAAaP,KAAKgB,YAAYhB,KAAKM,YACxCN,KAAKQ,UAAYR,KAAKgB,YAAYhB,KAAKM,Y,iDAGzC,SACEI,EACAC,EACAa,GAQA,IAAIC,EAAUf,EAAI,EACdgB,EAAUhB,EAAI,EACdiB,EAAahB,EAAI,EACjBiB,EAAajB,EAAI,EAEfkB,EAAQ7B,KAAK8B,gBAAgBN,GAE7BO,EAAY,CAChBC,GAAIH,EAAMJ,EAASE,GACnBM,GAAIJ,EAAMJ,EAASG,GACnBM,GAAIL,EAAMH,EAASC,GACnBQ,GAAIN,EAAMH,EAASE,IAGfQ,EAAY,CAChBC,GAAIR,EAAMJ,EAASd,GACnB2B,GAAIT,EAAMH,EAASf,GACnB4B,GAAIV,EAAMnB,EAAGiB,GACba,GAAIX,EAAMnB,EAAGkB,IAGf,MAAO,CACLG,YACAK,YACAjB,IAAI,2BAAMY,GAAcK,M,6BAI5B,SACEZ,GACiD,IAAD,OAChD,OAAO,SAACd,EAAWC,GACjB,OAAW,IAAPD,IAAmB,IAAPC,GAAYD,GAAK,EAAKR,MAAQS,GAAK,EAAKR,QAC/C,KACLqB,EAAMd,GAAGC,GAAW,CAACD,EAAGC,GACrB,Q,yBAkCX,SAAmBN,GAGjB,IAHyD,IAAD,OACpDK,EAAI,IAAI+B,MAAMzC,KAAKE,MAEdwC,EAAU,EAAGA,EAAUhC,EAAEiC,OAAQD,IACxChC,EAAEgC,GAAW,IAAID,MAAMzC,KAAKG,SAS9B,OANAyC,OAAOC,KAAKxC,GAAOyC,SAAQ,SAAClC,EAAemC,GACzC,IAAK,IAAIlC,EAAI,EAAGA,EAAI,EAAKX,KAAMW,IAC7BR,EAAM0C,GAAOC,SAASnC,GAAMH,EAAEqC,GAAOlC,IAAK,EAASH,EAAEqC,GAAOlC,IAAK,KAI9DH,I,qBAGT,SAAkBE,GAGhB,IAFA,IAAIqC,EACA1C,EAAaP,KAAKgB,YAAYhB,KAAKM,YAC9BO,EAAI,EAAGA,EAAIb,KAAKE,KAAMW,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAId,KAAKG,QAASW,IAChCmC,EAAejD,KAAKS,gBAAgBI,EAAGC,EAAGF,GAC1CL,EAAWM,GAAGC,GAAKmC,EAAapC,GAAGC,GAGvC,IAAK,IAAID,EAAI,EAAGA,EAAIb,KAAKE,KAAMW,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAId,KAAKG,QAASW,IAChCd,KAAKO,WAAWM,GAAGC,GAAKP,EAAWM,GAAGC,GACtCd,KAAKQ,UAAUK,GAAGC,GAAKd,KAAKO,WAAWM,GAAGC,GAI9C,OADAd,KAAKO,WAAW,GAAG,IAAK,EACV,IAAVK,EAAoB,CAACqC,EAAc1C,GAChCA,I,kBAGT,WAEE,IADA,IAAI2C,EAAQ,GACHrC,EAAI,EAAGA,EAAIb,KAAKI,KAAMS,IAC7BqC,EAAMC,KAAKnD,KAAKoD,QAAQvC,IAG1B,OAAOqC,M,KDsBE,CAzKM,GACG,GACH,IACyB,CAC1C,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,GAAI,GACJ,GAAI,CAAC,IACL,GAAI,CAAC,IACL,GAAI,CAAC,GAAI,GAAI,IACb,GAAI,GACJ,GAAI,GACJ,GAAI,CAAC,GAAI,IACT,GAAI,CAAC,GAAI,IACT,GAAI,CAAC,IACL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,IAE2C,CAC/C,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,KA0GcG,O,sBE3ILC,EA3BF,SAAC,GAAqB,IAAnBrD,EAAkB,EAAlBA,KACd,EAA8BsD,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,GAAnC,mBAAOxD,EAAP,KAAc2D,EAAd,KAEAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WACvB9D,GAASE,EAAK0C,OAChBmB,cAAcF,IAEdH,EAAWxD,EAAKF,IAChB2D,GAAS,SAAC3D,GAAD,OAAWA,EAAQ,QAE7B,KACH,OAAO,kBAAM+D,cAAcF,MAC1B,CAAC3D,EAAMF,IAGV,IADA,IAAIgE,EAAM,GACDlD,EAAI,EAAGA,EAAI2C,EAAQb,OAAQ9B,IAAK,CACvC,IAAK,IAAIC,EAAI,EAAGA,EAAI0C,EAAQb,OAAQ7B,IAClCiD,GAAG,gCAA6BP,EAAQ3C,GAAGC,GAAK,UAAY,GAAzD,aAELiD,GAAO,QAGT,OAAO,qBAAKC,wBAAyB,CAAEC,OAAQF,MCdlCG,G,MAZH,WACV,IAAIC,EAAQ,CAAClE,EAAK,GAAG,GAAIA,EAAK,GAAG,IAIjC,OAHAA,EAAKmE,QACLD,EAAK,sBAAOA,GAAP,YAAiBlE,IAGpB,qBAAKoE,UAAU,YAAf,SACE,cAAC,EAAD,CAAMpE,KAAMkE,QCTlBG,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.d4911c00.chunk.js","sourcesContent":["class BusinessRules {\n  protected count: number;\n\n  constructor(count: number) {\n    this.count = count;\n  }\n\n  get caseOne() {\n    return this.count <= 1;\n  }\n\n  get caseTwo() {\n    return this.count >= 4;\n  }\n\n  get caseThree() {\n    return this.count === 2 || this.count === 3;\n  }\n\n  get caseFour() {\n    return this.count === 3;\n  }\n}\n\nexport default BusinessRules;\n","import Games from \"./game/game\";\n\nlet rows: number = 30;\nlet columns: number = 30;\nlet step: number = 100;\nlet setup: { [x: string]: Array<number> } = {\n  0: [],\n  1: [],\n  2: [],\n  3: [],\n  4: [],\n  5: [],\n  6: [],\n  7: [],\n  8: [],\n  9: [],\n  10: [],\n  11: [14],\n  12: [13],\n  13: [13, 14, 15],\n  14: [],\n  15: [],\n  16: [14, 15],\n  17: [13, 15],\n  18: [15],\n  19: [],\n  20: [],\n  21: [],\n  22: [],\n  23: [],\n  24: [],\n  25: [],\n  26: [],\n  27: [],\n  28: [],\n  29: [],\n};\nlet finalSetup: { [x: string]: Array<number> } = {\n  0: [],\n  1: [],\n  2: [],\n  3: [],\n  4: [],\n  5: [],\n  6: [],\n  7: [],\n  8: [],\n  9: [],\n  10: [],\n  11: [],\n  12: [],\n  13: [],\n  14: [],\n  15: [],\n  16: [],\n  17: [],\n  18: [],\n  19: [],\n  20: [],\n  21: [],\n  22: [],\n  23: [],\n  24: [],\n  25: [],\n  26: [],\n  27: [],\n  28: [],\n  29: [],\n};\n\n// 0: [],\n//   1: [],\n//   2: [],\n//   3: [],\n//   4: [],\n//   5: [],\n//   6: [],\n//   7: [],\n//   8: [],\n//   9: [],\n//   10: [],\n//   11: [],\n//   12: [],\n//   13: [],\n//   14: [],\n//   15: [],\n//   16: [],\n//   17: [],\n//   18: [],\n//   19: [],\n//   20: [],\n//   21: [],\n//   22: [],\n//   23: [],\n//   24: [],\n//   25: [],\n//   26: [],\n//   27: [],\n//   28: [],\n//   29: [],\n//   30: [],\n//   31: [],\n//   32: [],\n//   33: [],\n//   34: [],\n//   35: [],\n//   36: [],\n//   37: [],\n//   38: [],\n//   39: [],\n//   40: [],\n//   41: [],\n//   42: [],\n//   43: [],\n//   44: [],\n//   45: [],\n//   46: [],\n//   47: [],\n//   48: [],\n//   49: [],\n//   50: [],\n//   51: [],\n//   52: [],\n//   53: [],\n//   54: [],\n//   55: [],\n//   56: [],\n//   57: [],\n//   58: [],\n//   59: [],\n//   60: [],\n//   61: [],\n//   62: [],\n//   63: [],\n//   64: [],\n//   65: [],\n//   66: [],\n//   67: [],\n//   68: [],\n//   69: [],\n//   70: [],\n//   71: [],\n//   72: [],\n//   73: [],\n//   74: [],\n//   75: [],\n//   76: [],\n//   77: [],\n//   78: [],\n//   79: [],\n//   80: [],\n//   81: [],\n//   82: [],\n//   83: [],\n//   84: [],\n//   85: [],\n//   86: [],\n//   87: [],\n//   88: [],\n//   89: [],\n//   90: [],\n//   91: [],\n//   92: [],\n//   93: [],\n//   94: [],\n//   95: [],\n//   96: [],\n//   97: [],\n//   98: [],\n//   99: [],\n\nconst game = new Games(rows, columns, step, setup, finalSetup);\n\nexport default game.init();\n","import BusinessRules from \"../rules/rules\";\n\nclass Games {\n  private rows: number;\n  private columns: number;\n  private step: number;\n  private setup: { [x: string]: Array<number> } = {};\n  private finalSetup: { [x: string]: Array<number> } = {};\n  private finalBoard: multiDimension;\n  private tempBoard: multiDimension;\n\n  constructor(\n    rows: number,\n    columns: number,\n    step: number,\n    setup: { [x: string]: Array<number> },\n    finalSetup: { [x: string]: Array<number> }\n  ) {\n    this.rows = rows;\n    this.columns = columns;\n    this.step = step;\n    this.setup = setup;\n    this.finalSetup = finalSetup;\n    this.finalBoard = this.createBoard(this.finalSetup);\n    this.tempBoard = this.createBoard(this.finalSetup);\n  }\n\n  protected getNeighbours(\n    x: number,\n    y: number,\n    board: multiDimension\n  ): {\n    diagonals: object;\n    opposites: object;\n    all: {\n      [x: number]: Array<number>;\n    };\n  } {\n    let rowsNeg = x - 1;\n    let rowsPos = x + 1;\n    let columnsNeg = y - 1;\n    let columnsPos = y + 1;\n\n    const check = this.confirmPosition(board);\n\n    const diagonals = {\n      d0: check(rowsNeg, columnsNeg),\n      d1: check(rowsNeg, columnsPos),\n      d2: check(rowsPos, columnsNeg),\n      d3: check(rowsPos, columnsPos),\n    };\n\n    const opposites = {\n      p0: check(rowsNeg, y),\n      p1: check(rowsPos, y),\n      p2: check(x, columnsNeg),\n      p3: check(x, columnsPos),\n    };\n\n    return {\n      diagonals,\n      opposites,\n      all: { ...diagonals, ...opposites },\n    };\n  }\n\n  protected confirmPosition(\n    board: multiDimension\n  ): (x: number, y: number) => Array<number> | null {\n    return (x: number, y: number) => {\n      if (x === -1 || y === -1 || x >= this.rows || y >= this.columns)\n        return null;\n      if (board[x][y]) return [x, y];\n      return null;\n    };\n  }\n\n  protected checkCellStatus = (x: number, y: number, value: number) => {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.finalBoard[i][j] = this.tempBoard[i][j];\n      }\n    }\n\n    const newboard =\n      value === 0 ? this.createBoard(this.setup) : this.finalBoard;\n\n    const neighbors = this.getNeighbours(x, y, newboard);\n\n    let count = 0;\n\n    for (let i in neighbors.all) {\n      if (neighbors.all[i] !== null) count++;\n    }\n\n    const businessRules = new BusinessRules(count);\n\n    if (newboard[x][y]) {\n      if (businessRules.caseOne || businessRules.caseTwo)\n        newboard[x][y] = false;\n    } else {\n      if (businessRules.caseFour) newboard[x][y] = true;\n    }\n\n    return newboard;\n  };\n\n  public createBoard(setup: { [x: string]: Array<number> }) {\n    let x = new Array(this.rows);\n\n    for (let counter = 0; counter < x.length; counter++) {\n      x[counter] = new Array(this.columns);\n    }\n\n    Object.keys(setup).forEach((value: string, index: number): void => {\n      for (let i = 0; i < this.rows; i++) {\n        setup[index].includes(i) ? (x[index][i] = true) : (x[index][i] = false);\n      }\n    });\n\n    return x;\n  }\n\n  protected runGame(value: number) {\n    let boardToCheck;\n    let finalBoard = this.createBoard(this.finalSetup);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        boardToCheck = this.checkCellStatus(i, j, value);\n        finalBoard[i][j] = boardToCheck[i][j];\n      }\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.finalBoard[i][j] = finalBoard[i][j];\n        this.tempBoard[i][j] = this.finalBoard[i][j];\n      }\n    }\n    this.finalBoard[0][0] = true;\n    if (value === 0) return [boardToCheck, finalBoard];\n    return finalBoard;\n  }\n\n  public init() {\n    let array = [];\n    for (let i = 0; i < this.step; i++) {\n      array.push(this.runGame(i));\n    }\n\n    return array;\n  }\n}\n\nexport default Games;\n","import React, { useState, useEffect } from \"react\";\nimport \"./grid.css\";\n\ninterface Props {\n  game: any;\n}\n\nconst Grid = ({ game }: Props) => {\n  const [current, setCurrent] = useState([]);\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (count >= game.length) {\n        clearInterval(interval);\n      } else {\n        setCurrent(game[count]);\n        setCount((count) => count + 1);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [game, count]);\n\n  let def = \"\";\n  for (let i = 0; i < current.length; i++) {\n    for (let j = 0; j < current.length; j++) {\n      def += `<span class=\"grid-span${current[i][j] ? \" active\" : \"\"}\"></span>`;\n    }\n    def += \"<br/>\";\n  }\n\n  return <div dangerouslySetInnerHTML={{ __html: def }}></div>;\n};\n\nexport default Grid;\n","import React from \"react\";\nimport game from \"./logic/index\";\nimport Grid from \"./components/grid\";\nimport \"./App.css\";\n\nconst App = () => {\n  let games = [game[0][0], game[0][1]];\n  game.shift();\n  games = [...games, ...game];\n\n  return (\n    <div className=\"container\">\n      <Grid game={games}></Grid>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}